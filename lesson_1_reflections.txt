How did viewing a diff between two versions of a file help you see the bug that
was introduced?

    By quickly identifying the modified lines

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    By having controled versions with the code actually running.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pros: when choosing to create a commit I can control the version that must be saved, and keep just the ones that actually works
    Cons: I have to save the file every time?

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    To be easy to return to an early working point 

How can you use the commands git log and git diff to view the history of files?

    When there exist more than one version of the file

How might using version control make you more confident to make changes that
could break something?

    Becaouse we will always could come back to a backup working version of the file

Now that you have your workspace set up, what do you want to try using Git for?

    For comparing the different versions of the files that I´m creating for an ongoing projetc.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

    If I take into account the dates in which the file has been changed, then it could be easy to find the latest working version control

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google docs does?

    Pros: Get the right amount of code to commit, not to small, not to big!
    Cons: It must be created a regular description of the actual changes.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

    I don´t know

How can you use the commands git log and git diff to view the history of files?
    
    git log will show the description of the changes between commits
    git diff will show the differences between two files
    git log --stat will show the description of the changes between commits and the number of lines added or erases within each version

How might using version control make you more confident to make changes that could break something?
    By saving previous actually working versinos, and if something went wrong during an actual version it can be easily return to a working point!

Now that you have your workspace set up, what do you want to try using Git for?
    In my own project!

LESSON 2:
What happens when you initialize a repository? Why do you need to do it?
    the folder .git is created, making my folder a repository.

How is the staging area different from the working directory and the repository? What value do you think it offers?
    It allows to perform several changes in a file, upload a file to be put in the git, in order to create a commit at once.

    




***************************
Coommands:
***************************

Compare two commits, printing each line that is present in one commit but not the other.
    git diff will do this. It takes two arguments - the two commit ids to compare. 

Make a copy of an entire Git repository, including the history, onto your own computer.
    git clone will do this. It takes one argument - the url of the repository to copy. 

Temporarily reset all files in a directory to their state at the time of a specific commit.
    git checkout will do this. It takes one argument - the commit ID to restore. 

Show the commits made in this repository, starting with the most recent.
    git log will do this. It doesn't take any arguments.
    git log --stat

git init:   Initializes a new repository
git status: Show the files that have been changed
git add:    Add the files to be tracked into an intermediate stage, the staging area, that prepares the files to update the commint at once
